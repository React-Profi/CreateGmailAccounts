import { z } from "zod";
/**
 * Define the expected shape of the lumtest.com response.
 * @type {z.ZodObject}
 */
export declare const LumResponseSchema: z.ZodObject<{
    ip: z.ZodString;
    country: z.ZodOptional<z.ZodString, false>;
    asn: z.ZodOptional<z.ZodAny, false>;
    geo: z.ZodObject<{
        city: z.ZodOptional<z.ZodString, false>;
        region: z.ZodOptional<z.ZodString, false>;
        region_name: z.ZodOptional<z.ZodString, false>;
        postal_code: z.ZodOptional<z.ZodString, false>;
        latitude: z.ZodOptional<z.ZodNumber, false>;
        longitude: z.ZodOptional<z.ZodNumber, false>;
        tz: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        city?: string | undefined;
        region?: string | undefined;
        region_name?: string | undefined;
        postal_code?: string | undefined;
        latitude?: number | undefined;
        longitude?: number | undefined;
        tz: string;
    }, {
        city?: string | undefined;
        region?: string | undefined;
        region_name?: string | undefined;
        postal_code?: string | undefined;
        latitude?: number | undefined;
        longitude?: number | undefined;
        tz: string;
    }>;
}, "strip", z.ZodTypeAny, {
    country?: string | undefined;
    asn?: any;
    ip: string;
    geo: {
        city?: string | undefined;
        region?: string | undefined;
        region_name?: string | undefined;
        postal_code?: string | undefined;
        latitude?: number | undefined;
        longitude?: number | undefined;
        tz: string;
    };
}, {
    country?: string | undefined;
    asn?: any;
    ip: string;
    geo: {
        city?: string | undefined;
        region?: string | undefined;
        region_name?: string | undefined;
        postal_code?: string | undefined;
        latitude?: number | undefined;
        longitude?: number | undefined;
        tz: string;
    };
}>;
/**
 * Define the shape expected to be returned by CDP when querying target id.
 * @see https://chromedevtools.github.io/devtools-protocol/tot/Target/#method-getTargetInfo
 * @type {z.ZodObject}
 */
export declare const TargetInfoSchema: z.ZodObject<{
    targetInfo: z.ZodObject<{
        targetId: z.ZodString;
        type: z.ZodEffects<z.ZodString, string>;
        attached: z.ZodEffects<z.ZodBoolean, boolean>;
    }, "passthrough", z.ZodTypeAny, {
        type: string;
        targetId: string;
        attached: boolean;
    }, {
        type: string;
        targetId: string;
        attached: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    targetInfo: {
        type: string;
        targetId: string;
        attached: boolean;
    };
}, {
    targetInfo: {
        type: string;
        targetId: string;
        attached: boolean;
    };
}>;
